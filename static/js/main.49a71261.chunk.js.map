{"version":3,"sources":["componentes/Header.js","componentes/Formulario.js","componentes/Error.js","componentes/Clima.js","App.js","serviceWorker.js","index.js"],"names":["Header","props","react_default","a","createElement","className","titulo","Formulario","ciudadRef","React","createRef","paisRef","buscarClima","e","preventDefault","respuesta","ciudad","_this","current","value","pais","datosConsulta","onSubmit","this","ref","id","type","htlfor","defaultValue","htmlFor","Component","Error","mensaje","Clima","mostrarResultado","_this$props$resultado","resultado","name","weather","main","urlIcono","concat","icon","alt","temp","toFixed","src","temp_max","temp_min","console","log","App","state","error","consulta","consultarApi","_this$state$consulta","url","fetch","then","json","datos","setState","catch","prevProvs","prevState","cod","componentes_Error","componentes_Clima","componentes_Header","componentes_Formulario","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.49a71261.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Header = (props) => {\r\n    return (\r\n        <div>\r\n            <nav>\r\n                    <div className=\"nav-wrapper  light-blue darken-2\">\r\n                        <a className=\"brand-logo\">{props.titulo}</a>\r\n                    </div>\r\n            </nav>\r\n        </div>\r\n    );\r\n};\r\n\r\nHeader.propTypes = {    \r\n    titulo:PropTypes.string.isRequired\r\n}\r\n\r\n\r\n\r\nexport default Header;\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\n\r\nclass Formulario extends Component {\r\n\r\n\r\n    //Crear los refs\r\n    ciudadRef = React.createRef()\r\n    paisRef = React.createRef();\r\n\r\n\r\n    buscarClima=(e)=>{\r\n        e.preventDefault();\r\n\r\n        //Leer los ref y crear el objeto\r\n        const respuesta = {\r\n            ciudad:this.ciudadRef.current.value,\r\n            pais:this.paisRef.current.value\r\n        }\r\n        //console.log(respuesta)\r\n\r\n        //Enviar por props\r\n        this.props.datosConsulta(respuesta)\r\n\r\n        //Opcional resetear el form\r\n\r\n\r\n    }\r\n    \r\n    render() { \r\n        return ( \r\n            <div className=\"contenedor-form\">\r\n                <div className=\"container\">\r\n                    <div className=\"row\">\r\n                        <form onSubmit={this.buscarClima}>\r\n                            <div className=\"input-field col s12 m8 l4 offset-m2\">\r\n                                <input ref={this.ciudadRef} id=\"ciudad\" type=\"text\"/>\r\n                                <label htlfor=\"ciudad\">Ciudad: </label>\r\n                            </div>\r\n                            <div className=\"input-field col s12 m8 l4 offset-m2\">\r\n                                <select ref={this.paisRef}>\r\n                                    <option value=\"\" defaultValue>Elige un pais</option>    \r\n                                    <option value=\"AR\">Argentina</option>                                \r\n                                    <option value=\"CO\">Colombia</option>   \r\n                                    <option value=\"CR\">Costa Rica</option>   \r\n                                    <option value=\"ES\">España</option>   \r\n                                    <option value=\"US\">Estados Unidos</option>   \r\n                                    <option value=\"MX\">México</option>   \r\n                                    <option value=\"PE\">Perú</option>   \r\n                                </select>\r\n                                <label htmlFor=\"pais\">Pais: </label>                                \r\n                            </div>\r\n                            <div className=\"input-field col s12 m8 l4 offset-2 buscador\">\r\n                                <input type=\"submit\" className=\"waves-effect waves-light btn-large yellow accent-4\" value=\"Buscar...\"/>\r\n                            </div>\r\n                        </form>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n         );\r\n    }\r\n}\r\n \r\nFormulario.propTypes = {\r\n    datosConsulta:PropTypes.func.isRequired\r\n}\r\n\r\nexport default Formulario;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\n//Creamos un stateless component\r\nconst Error = (props) => {\r\n    return ( \r\n        <div className=\"container\">\r\n            <div className=\"row\">\r\n                <div className=\"col s12 m6 offset-m3\">\r\n                    <div className=\"card-panel red darken-4 error\">\r\n                        {props.mensaje}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n     );\r\n}\r\n \r\nError.propTypes = {\r\n    mensaje:PropTypes.string.isRequired\r\n}\r\n\r\n\r\nexport default Error;","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\n\r\nclass Clima extends Component {\r\n\r\n    mostrarResultado = () => {\r\n\r\n        //Obtener los datos de la consulta\r\n        const {name,weather,main} = this.props.resultado //hacemos un destructurin para solo tomar de la respuesta los valores que nos interesan\r\n\r\n        if(!name || !weather || !main){\r\n            return null;\r\n        }\r\n        \r\n        const kelvin = 273.15;\r\n\r\n        const urlIcono = `http://openweathermap.org/img/w/${weather[0].icon}.png`;\r\n        const alt = `Clima de ${name}`\r\n\r\n        return(\r\n            <div className=\"row\">\r\n                <div className=\"resultado col s12 m8 l6 offset-m2 offset-l3 \">\r\n                    <div className=\"card-panel light-blue align-center\">\r\n                        <span className=\"white-text\">\r\n                            <h2>Resultado Clima de {name}</h2>\r\n                            <p className=\"temperatura\">\r\n                                Actual: {(main.temp - kelvin).toFixed(2)} &deg;C\r\n                                <img src={urlIcono} alt={alt} ></img>\r\n                            </p>\r\n                            <p>Max. {main.temp_max - kelvin} &deg;C</p>\r\n                            <p>Max. {main.temp_min - kelvin} &deg;C</p>\r\n\r\n                        </span>\r\n                    </div>\r\n                </div>\r\n                {name}\r\n                \r\n            </div>\r\n        )\r\n    }\r\n\r\n\r\n    render() { \r\n\r\n        console.log(this.props.resultado)\r\n        return ( \r\n            <div className=\"container\">\r\n                {this.mostrarResultado()}\r\n            </div>\r\n         );\r\n    }\r\n}\r\nClima.propTypes = {\r\n    resultado:PropTypes.object.isRequired\r\n}\r\n\r\n\r\nexport default Clima;","import React, { Component } from 'react';\nimport Header from './componentes/Header';\nimport Formulario from './componentes/Formulario';\nimport Error from './componentes/Error';\nimport Clima from './componentes/Clima';\n\n\nclass App extends Component {\n\n  state = {\n    error:'',\n    consulta:{},\n    resultado:{}\n  }\n\n  componentDidUpdate(prevProvs, prevState){\n    \n    if(prevState.consulta !== this.state.consulta){\n      this.consultarApi();\n    }\n    \n  }\n\n  componentDidMount(){\n    this.setState({\n      error:false\n    })\n  }\n\n  consultarApi = () =>{\n    const {ciudad,pais}=this.state.consulta;\n\n    if(!ciudad || ! pais){\n      return null\n    }\n\n    //Leemos la URL y agregar el Api Key\n    const appId = \"a81e78526114357acf5141d5837748c3\";\n\n    let url = `http://api.openweathermap.org/data/2.5/weather?q=${ciudad},${pais}&appid=${appId}`;\n\n    //console.log(url)\n\n    //Hacemos un query con  fetch Api\n    fetch(url)\n    .then(respuesta => {\n      return respuesta.json();\n    })\n    .then(datos=>{\n      //console.log(datos)\n\n      this.setState({\n        resultado: datos\n      })\n\n\n    })\n    .catch(error=>{\n      console.log(error)\n    })    \n\n    console.log(ciudad)\n    console.log(pais)\n  }\n\n\n  datosConsulta = respuesta =>{\n    if(respuesta.ciudad === '' || respuesta.pais === ''){\n      console.log(\"Hay errores\")\n      this.setState({\n        error:true\n      })\n\n    }else{\n      console.log(respuesta)\n\n        this.setState({\n          consulta: respuesta,\n          error:false\n        })\n        \n      \n    }\n    \n  }\n\n\n  render() {\n\n\n    const error = this.state.error;\n    console.log(error)\n\n    const {cod} = this.state.resultado //Aqui extraeremos la variable cod de la request que se realizó\n\n    \n    let resultado;\n\n    if(error){\n      resultado=<Error mensaje=\"Ambos campos son obligatorios\"/>;\n    }else if(cod === \"404\"){\n      resultado=<Error mensaje=\"Ciudad no encontrada\"/>\n    }else{\n      resultado = <Clima resultado = {this.state.resultado}/>\n    }\n\n    return (\n      <div className=\"app\">\n\n        <Header\n          titulo=\"Clima React\"\n        />\n\n        <Formulario\n          datosConsulta = {this.datosConsulta}\n        />      \n        {resultado}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './css/index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}